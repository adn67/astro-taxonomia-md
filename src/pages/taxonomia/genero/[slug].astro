---
import Layout from '../../../layouts/Layout.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import RankTag from '../../../components/RankTag.astro';
import TaxonDetails from '../../../components/TaxonDetails.astro';

import { getCollection, getEntry } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import { slugify } from '../../../utils/slugify';
import { RANK_METADATA, type Rank } from '../../../utils/rankLabels';

// 📌 Cargar todos los taxones una sola vez
const allTaxa = await getCollection('taxonomia');

// 📌 Obtener el slug actual desde la URL
const { slug } = Astro.params as { slug: string };

// 📌 Buscar el taxón correspondiente
const current = await getEntry('taxonomia', slug);
if (!current) {
  throw new Error(`No se encontró el taxón con slug: ${slug}`);
}

// 📌 Reconstruir la cadena de padres jerárquicos
const parentChain: CollectionEntry<'taxonomia'>[] = [];
let parentSlug = current.data.parent ? slugify(current.data.parent) : null;

while (parentSlug) {
  const parent = allTaxa.find((t) => t.slug === parentSlug);
  if (!parent) break;
  parentChain.unshift(parent);
  parentSlug = parent.data.parent ? slugify(parent.data.parent) : null;
}

// 📌 Filtrar hijos directos del taxón actual
const children = allTaxa.filter(
  (t) => t.data.parent && slugify(t.data.parent) === current.slug
);

// 📌 Determinar el rango siguiente para mostrar
const currentRank = current.data.rank;
const rankOrder = ['division', 'orden', 'familia', 'genero', 'especie'] as Rank[];

const nextRankIndex = rankOrder.indexOf(currentRank) + 1;
const nextRank = rankOrder[nextRankIndex];
const nextRankLabel = nextRank ? RANK_METADATA[nextRank]?.plural : null;


export async function getStaticPaths() {
  const entries = await getCollection("taxonomia");
  const generos = entries.filter((entry) => entry.data.rank === "genero");

  return generos.map((entry) => ({
    params: { slug: entry.slug },
  }));
}

---

<Layout title={current.data.name}>
  <!-- 🧭 Breadcrumb jerárquico -->
  <Breadcrumb current={current} parents={parentChain} />

  <!-- 🏷️ Título y etiqueta de rango -->
  <h1>{current.data.name}</h1>
  <RankTag rank={current.data.rank} />

  <!-- 🧾 Detalles del taxón -->
    <TaxonDetails taxon={current} />


  <!-- 🐣 Mostrar hijos si existen -->
  {children.length > 0 && nextRankLabel && (
    <>
      <h2>{nextRankLabel}</h2>
      <ul>
        {children.map((child) => (
          <li>
            <a href={`/taxonomia/${child.data.rank}/${child.slug}`}>
              {child.data.name}
            </a>
          </li>
        ))}
      </ul>
    </>
  )}
</Layout>

