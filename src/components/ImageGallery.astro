---
// src/components/ImageGallery.astro
import { Image } from 'astro:assets'; // Importa el componente Image de Astro
import type { GalleryImage } from '../utils/galleryTypes';

interface Props {
  images: GalleryImage[];
}

const { images } = Astro.props;

// PhotoSwipe CSS y JS (se cargarán solo si este componente se renderiza)
import 'photoswipe/dist/photoswipe.css';
import PhotoSwipeLightbox from 'photoswipe/dist/photoswipe-lightbox.esm.js';

// Convertir las imágenes a un formato que PhotoSwipe entienda
const photoswipeItems = images.map(img => ({
  src: img.src,
  alt: img.alt,
  width: img.width,
  height: img.height,
  msrc: img.thumbnailSrc || img.src, // Miniatura para PhotoSwipe si es diferente; si no, usa la principal
}));
---

<div class="image-gallery">
  {images.length > 0 ? (
    <div class="gallery-grid">
      {images.map((image, index) => (
        <a
          href={image.src}
          data-pswp-width={image.width}
          data-pswp-height={image.height}
          target="_blank"
          rel="noopener noreferrer"
          class="gallery-item"
          data-pswp-srcset={`${image.src} ${image.width}w`}
        >
          <Image
            src={image.thumbnailSrc || image.src} // Usa thumbnailSrc si existe; si no, la principal
            alt={image.alt}
            widths={[100, 200, 300]} // Tamaños para srcset de la miniatura
            sizes="(max-width: 600px) 100px, 200px" // Responsive sizes para la miniatura
            loading="lazy"
            decoding="async"
            class="thumbnail"
          />
        </a>
      ))}
    </div>
  ) : (
    <p>No hay imágenes para mostrar en la galería.</p>
  )}
</div>

<script is:inline>
  // El script debe estar dentro de un bloque <script> con is:inline para que se ejecute en el cliente
  // y después de que Astro haya montado el HTML.
  // También se puede hacer como un script externo que importe PhotoSwipeLightbox.
  document.addEventListener('astro:load', () => {
    // Solo inicializa PhotoSwipe si hay elementos de galería
    const galleryContainer = document.querySelector('.image-gallery .gallery-grid');
    if (galleryContainer && galleryContainer.children.length > 0) {
      const lightbox = new PhotoSwipeLightbox({
        gallery: '.image-gallery .gallery-grid',
        children: 'a',
        pswpModule: () => import('photoswipe'), // Importa PhotoSwipe dinámicamente cuando se necesita
      });
      lightbox.init();
    }
  });
</script>

<style>
  .image-gallery {
    margin-top: 2rem;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* Miniaturas responsivas */
    gap: 1rem;
    padding: 1rem;
    background-color: #f0f0f0; /* Un color de fondo para la galería */
    border-radius: 8px;
  }

  .gallery-item {
    display: block;
    overflow: hidden;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease-in-out;
  }

  .gallery-item:hover {
    transform: scale(1.03);
  }

  .thumbnail {
    width: 100%;
    height: 150px; /* Altura fija para las miniaturas, ajustar según sea necesario */
    object-fit: cover; /* Asegura que la imagen cubra el espacio sin distorsionarse */
    display: block; /* Elimina espacio extra debajo de la imagen */
  }

  /* Estilos específicos de PhotoSwipe se cargarán con 'photoswipe.css' */
</style>